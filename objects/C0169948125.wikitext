{{Setup
|HasEntityTitle=Dockerized dataspectsSystem
}}
== Clone a dataspectsSystem e.g. for testing ==

=== Idea ===

Let's say you have a {{code|production}} system that you want to clone as a {{code|test}} system, then:

# {{code|user@dockerserver:~$ mkdir test && cp -r production/docker-compose.yml test/docker-compose.yml}}
# Edit {{code|user@dockerserver:~/test$ vi {{my|docker-compose.yml}}}}, see section "docker-compose.yml files" below:
#* Remove both the {{code|proxy}} Docker service and the {{code|nginx_conf}} Docker volume.
#* Add postfix {{code|_test}} to all Docker service names.
#* Specify the {{code|production}}'s default Docker network as the {{code|test}}'s default Docker network.
# {{code|user@dockerserver:~/test$ docker-compose up [--detach]}}
# Set {{code|production}} MediaWiki to https://www.mediawiki.org/wiki/Manual:$wgReadOnly.
# {{code|mysqldump}} {{code|production}} MediaWiki database into Docker volume {{code|production_mediawiki_root}}.
# Copy entire {{code|production_mediawiki_root}} to {{code|{{my|test}}_mediawiki_root}}.
# Edit {{code|{{my|test}}_mediawiki_root}}'s {{code|LocalSettings.php}}:
#* {{code|1=$wgDBserver = "db_{{my|test}}";}}
#* {{code|1=$wgServer = "http://{{my|test}}.dataspects.local";}}
#* {{code|1=$wgVirtualRestConfig['modules']['parsoid'] = array('url' => '<nowiki>http://parsoid_</nowiki>{{my|test}}:8000');}}
# Restore {{code|{{my|test}}}} MediaWiki database to Docker service {{code|db_{{my|test}}}}.
# Visit http://test.dataspects.local.

 [https://mermaidjs.github.io/mermaid-live-editor/#/view/eyJjb2RlIjoiZ3JhcGggTFJcbiAgcHJveHkgLS0-fHRlc3QuZGF0YXNwZWN0cy5sb2NhbHwgbWVkaWF3aWtpc2VydmljZV90ZXN0XG4gIHByb3h5IC0tPnxraWJhbmEudGVzdC5kYXRhc3BlY3RzLmxvY2FsfCBraWJhbmFfdGVzdFxuICBwcm94eSAtLT58dGlrYS50ZXN0LmRhdGFzcGVjdHMubG9jYWx8IHRpa2FfdGVzdFxuXG5zdWJncmFwaCBEb2NrZXJTdGFjayAnUFJPRFVDVElPTidcblxuICBtZWRpYXdpa2lzZXJ2aWNlW0RvY2tlclNlcnZpY2U8YnI-J21lZGlhd2lraXNlcnZpY2UnXVxuICBwcm94eVtEb2NrZXJTZXJ2aWNlPGJyPidwcm94eSc8YnI-bGlzdGVuIDgwXVxuICBkYltEb2NrZXJTZXJ2aWNlPGJyPidkYiddXG4gIHBhcnNvaWRbRG9ja2VyU2VydmljZTxicj4ncGFyc29pZCddXG4gIGVsYXN0aWNzZWFyY2hbRG9ja2VyU2VydmljZTxicj4nZWxhc3RpY3NlYXJjaCddXG4gIGtpYmFuYVtEb2NrZXJTZXJ2aWNlPGJyPidraWJhbmEnXVxuICB0aWthW0RvY2tlclNlcnZpY2U8YnI-J3Rpa2EnXVxuXG5wcm9kdWN0aW9uX21lZGlhd2lraV9yb290W0RvY2tlclZvbHVtZTxicj4ncHJvZHVjdGlvbl9tZWRpYXdpa2lfcm9vdCddXG5wcm9kdWN0aW9uX21lZGlhd2lraV9jb25mW0RvY2tlclZvbHVtZTxicj4ncHJvZHVjdGlvbl9tZWRpYXdpa2lfY29uZiddXG5wcm9kdWN0aW9uX21hcmlhZGJfZGF0YVtEb2NrZXJWb2x1bWU8YnI-J3Byb2R1Y3Rpb25fbWFyaWFkYl9kYXRhJ11cbnByb2R1Y3Rpb25fZXNkYXRhW0RvY2tlclZvbHVtZTxicj4ncHJvZHVjdGlvbl9lc2RhdGEnXVxucHJvZHVjdGlvbl9uZ2lueF9jb25mW0RvY2tlclZvbHVtZTxicj4ncHJvZHVjdGlvbl9uZ2lueF9jb25mJ11cblxuICBtZWRpYXdpa2lzZXJ2aWNlIC0uLSBwcm9kdWN0aW9uX21lZGlhd2lraV9yb290XG4gIG1lZGlhd2lraXNlcnZpY2UgLS4tIHByb2R1Y3Rpb25fbWVkaWF3aWtpX2NvbmZcbiAgcHJveHkgLS0-fGRhdGFzcGVjdHMubG9jYWx8IG1lZGlhd2lraXNlcnZpY2VcbiAgcHJveHkgLS0-fGtpYmFuYS5kYXRhc3BlY3RzLmxvY2FsfCBraWJhbmFcbiAgcHJveHkgLS0-fHRpa2EuZGF0YXNwZWN0cy5sb2NhbHwgdGlrYVxuICBwcm94eSAtLi0gcHJvZHVjdGlvbl9uZ2lueF9jb25mXG4gIGRiIC0uLSBwcm9kdWN0aW9uX21hcmlhZGJfZGF0YVxuICBwYXJzb2lkXG4gIGVsYXN0aWNzZWFyY2ggLS4tIHByb2R1Y3Rpb25fZXNkYXRhXG4gIGtpYmFuYVxuICB0aWthXG5lbmRcblxuc3ViZ3JhcGggRG9ja2VyU3RhY2sgJ1RFU1QnXG5cbiAgbWVkaWF3aWtpc2VydmljZV90ZXN0W0RvY2tlclNlcnZpY2U8YnI-J21lZGlhd2lraXNlcnZpY2VfdGVzdCddXG4gIGRiX3Rlc3RbRG9ja2VyU2VydmljZTxicj4nZGJfdGVzdCddXG4gIHBhcnNvaWRfdGVzdFtEb2NrZXJTZXJ2aWNlPGJyPidwYXJzb2lkX3Rlc3QnXVxuICBlbGFzdGljc2VhcmNoX3Rlc3RbRG9ja2VyU2VydmljZTxicj4nZWxhc3RpY3NlYXJjaF90ZXN0J11cbiAga2liYW5hX3Rlc3RbRG9ja2VyU2VydmljZTxicj4na2liYW5hX3Rlc3QnXVxuICB0aWthX3Rlc3RbRG9ja2VyU2VydmljZTxicj4ndGlrYV90ZXN0J11cblxudGVzdF9tZWRpYXdpa2lfcm9vdFtEb2NrZXJWb2x1bWU8YnI-J3Rlc3RfbWVkaWF3aWtpX3Jvb3QnXVxudGVzdF9tZWRpYXdpa2lfY29uZltEb2NrZXJWb2x1bWU8YnI-J3Rlc3RfbWVkaWF3aWtpX2NvbmYnXVxudGVzdF9tYXJpYWRiX2RhdGFbRG9ja2VyVm9sdW1lPGJyPid0ZXN0X21hcmlhZGJfZGF0YSddXG50ZXN0X2VzZGF0YVtEb2NrZXJWb2x1bWU8YnI-J3Rlc3RfZXNkYXRhJ11cblxuICBtZWRpYXdpa2lzZXJ2aWNlX3Rlc3QgLS4tIHRlc3RfbWVkaWF3aWtpX3Jvb3RcbiAgbWVkaWF3aWtpc2VydmljZV90ZXN0IC0uLSB0ZXN0X21lZGlhd2lraV9jb25mXG4gIGRiX3Rlc3QgLS4tIHRlc3RfbWFyaWFkYl9kYXRhXG4gIHBhcnNvaWRfdGVzdFxuICBlbGFzdGljc2VhcmNoX3Rlc3QgLS4tIHRlc3RfZXNkYXRhXG4gIGtpYmFuYV90ZXN0XG4gIHRpa2FfdGVzdFxuZW5kXG4iLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9fQ Mermaid Flowchart]

=== docker-compose.yml files ===

{| class="wikitable" width="100%"
! width="50%" |production/docker-compose.yml
!test/{{my|docker-compose.yml}}
|-
|
<syntaxhighlight lang="yaml">
version: "3"
services:
  db:
    image: mariadb:10.3.10
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: mysqlrootpass
    volumes:
      - mariadb_data:/var/lib/mysql
  mediawikiservice:
    image: dataspects/docker-apache-php-dataspects-mediawiki:1.2
    volumes:
      - mediawiki_root:/var/www/html/w
      - mediawiki_conf:/etc/apache2/sites-available
  parsoid:
    image: dataspects/docker-parsoid:1.0
    environment:
      PARSOID_DOMAIN_localdataspectssystem: http://mediawikiservice/w/api.php
  elasticsearch:
    image: dataspects/docker-elasticsearch:6.5.4
    environment:
      - "ES_JAVA_OPTS=-Xms2048m -Xmx2048m"
      - "discovery.type=single-node"
    volumes:
      - esdata:/usr/share/elasticsearch/data
  kibana:
    image: kibana:6.5.4
    environment:
      - "ELASTICSEARCH_URL=http://elasticsearch:9200"
  tika:
    image: logicalspark/docker-tikaserver:1.20
  proxy:
    image: dataspects/docker-nginx:1.0.1
    ports:
      - 80:80
    volumes:
      - nginx_conf:/etc/nginx/conf.d
volumes:
  mariadb_data:
    driver: local
  mediawiki_root:
    driver: local
  mediawiki_conf:
    driver: local
  esdata:
    driver: local
  nginx_conf: # <-- This is unique to the production stack!
    driver: local
</syntaxhighlight>
|
<syntaxhighlight lang="yaml">
version: "3"
services: # <-- All service names get postfix _test!
  db_test:
    image: mariadb:10.3.10
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: mysqlrootpass
    volumes:
      - mariadb_data:/var/lib/mysql
  mediawikiservice_test:
    image: dataspects/docker-apache-php-dataspects-mediawiki:1.2
    volumes:
      - mediawiki_root:/var/www/html/w
      - mediawiki_conf:/etc/apache2/sites-available
  parsoid_test:
    image: dataspects/docker-parsoid:1.0
    environment:
      PARSOID_DOMAIN_localdataspectssystem: http://mediawikiservice/w/api.php
  elasticsearch_test:
    image: dataspects/docker-elasticsearch:6.5.4
    environment:
      - "ES_JAVA_OPTS=-Xms2048m -Xmx2048m"
      - "discovery.type=single-node"
    volumes:
      - esdata:/usr/share/elasticsearch/data
  kibana_test:
    image: kibana:6.5.4
    environment:
      - "ELASTICSEARCH_URL=http://elasticsearch_test:9200"
  tika_test:
    image: logicalspark/docker-tikaserver:1.20
volumes:
  mariadb_data:
    driver: local
  mediawiki_root:
    driver: local
  mediawiki_conf:
    driver: local
  esdata:
    driver: local
networks: # <-- This is unique to the test stack!
  default:
    external:
      name: production_default
</syntaxhighlight>
|}

=== /etc/hosts ===

<syntaxhighlight lang="bash">
# Production
10.100.0.123            dataspects.local
10.100.0.123            kibana.dataspects.local
10.100.0.123            tika.dataspects.local

# Test <-- Add test domains
10.100.0.123            test.dataspects.local
10.100.0.123            kibana.test.dataspects.local
10.100.0.123            tika.test.dataspects.local
</syntaxhighlight>

=== production_nginx_conf ===

{| class="wikitable" width="100%"
! width="50%" |production_nginx_conf/production.conf
!production_nginx_conf/test.conf
|-
|
<syntaxhighlight lang="bash">
server {
    listen 80;
    server_name dataspects.local;
    location / {
        proxy_pass http://mediawikiservice;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

server {
    listen 80;
    server_name kibana.dataspects.local;
    location / {
        proxy_pass http://kibana:5601;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

server {
    listen 80;
    server_name tika.dataspects.local;
    location / {
        proxy_pass http://tika:9998;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
</syntaxhighlight>
|
<syntaxhighlight lang="bash">
# Set server names to test domain
# Set proxy passes to test Docker service names

server {
    listen 80;
    server_name test.dataspects.local;
    location / {
        proxy_pass http://mediawikiservice_test;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

server {
    listen 80;
    server_name kibana.test.dataspects.local;
    location / {
        proxy_pass http://kibana_test:5601;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

server {
    listen 80;
    server_name tika.test.dataspects.local;
    location / {
        proxy_pass http://tika_test:9998;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

</syntaxhighlight>
|}
